apiVersion: tekton.dev/v1beta1
kind: TaskRun
metadata:
  generateName: init-gitea-
spec:
  workspaces:
    - name: workspace
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
  taskSpec:
    params:
    - name: GITEA_USER
      type: string
      description: Gitea admin username
      default: gitea
    - name: GITEA_PASSWORD
      type: string
      description: Gitea admin password
      default: openshift
    - name: GITEA_URL
      type: string
      description: Gitea url
      default: @gitea-url@
    - name: WEBHOOK_URL
      type: string
      description: The pipelines-as-code webhook url
      default: "@webhook-url@"
    stepTemplate:
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
    steps:
      - name: init-gitea
        image: quay.io/siamaksade/python-oc
        script: |
          #!/usr/bin/env python3

          import requests
          import os

          gitea_user = "$(params.GITEA_USER)"
          gitea_pwd = "$(params.GITEA_PASSWORD)"
          giteaURL = "$(params.GITEA_URL)"
          webhookURL = "$(params.WEBHOOK_URL)"
          workspace_path = "$(workspaces.workspace.path)"  # Get dynamic workspace path

          print(f"Workspace path: {workspace_path}")

          # create admin user
          data_user = {
          'user_name': gitea_user,
          'password': gitea_pwd,
          'retype': gitea_pwd,
          'email': 'admin@gitea.com'
          }

          resp = requests.post(url = giteaURL + "/user/sign_up", data = data_user) 

          if resp.status_code != 200:
            print("Error creating Gogs admin (status code: {})".format(resp.status_code))
            print(resp.content)
          else:
            print("Created admin user {}:{}".format(gitea_user, gitea_pwd))

          # create git repo helloworld
          data_repo = '{"clone_addr": "https://github.com/rrahhal1/helloworld-pac", "uid": 1, "repo_name": "helloworld"}'
          headers = {'Content-Type': 'application/json'}
          resp = requests.post(url = giteaURL + "/api/v1/repos/migrate", headers = headers, auth = (gitea_user, gitea_pwd), data = data_repo)  

          if resp.status_code != 200 and resp.status_code != 201:
            print("Error creating git repo (status code: {})".format(resp.status_code))
            print(resp.content)
          else:
            print("Created git repo spring-petclinic")

          # set default branch on helloworld git repo
          data_branch = '{"default_branch": "cicd-demo1"}'
          headers = {'Content-Type': 'application/json'}
          resp = requests.patch(url = giteaURL + "/api/v1/repos/" + gitea_user + "/helloworld", 
                              headers = headers, 
                              auth = (gitea_user, gitea_pwd), 
                              data = data_branch) 

          if resp.status_code != 200 and resp.status_code != 201:
            print("Error configuring the webhook (status code: {})".format(resp.status_code))
            print(resp.content)
          else:
            print("Set default branch to 'cicd-demo1'")

          # configure webhook on helloworld repo
          data_webhook = '{"type": "gitea", "config": { "url": "' + webhookURL + '", "content_type": "json"}, "events": ["push", "pull_request", "issue_comment"], "active": true}'
          headers = {'Content-Type': 'application/json'}
          resp = requests.post(url = giteaURL + "/api/v1/repos/" + gitea_user + "/helloworld/hooks", 
                              headers = headers, 
                              auth = (gitea_user, gitea_pwd), 
                              data = data_webhook) 

          if resp.status_code != 200 and resp.status_code != 201:
            print("Error configuring the webhook (status code: {})".format(resp.status_code))
            print(resp.content)
          else:
            print("Configured webhook: " + webhookURL)

          # create git repo helloworld-config
          data_repo = '{"clone_addr": "https://github.com/rrahhal1/helloworld-config.git", "uid": 1, "repo_name": "helloworld-config"}'
          headers = {'Content-Type': 'application/json'}
          resp = requests.post(url = giteaURL + "/api/v1/repos/migrate", headers = headers, auth = (gitea_user, gitea_pwd), data = data_repo)  

          if resp.status_code != 200 and resp.status_code != 201:
            print("Error creating git repo (status code: {})".format(resp.status_code))
            print(resp.content)
          else:
            print("Created git repo helloworld-config")

          # create token for user
          data_token = '{"name": "cicd", "scopes": ["write:admin", "write:issue", "write:misc", "write:notification", "write:repository"]}'
          headers = {'Content-Type': 'application/json'}
          resp = requests.post(url = giteaURL + "/api/v1/users/" + gitea_user + "/tokens", headers = headers, auth = (gitea_user, gitea_pwd), data = data_token)  
          resp.raise_for_status()
          gitea_token = resp.json()["sha1"]
          print("## Token: " + gitea_token + " ##")

          os.popen('oc create secret generic gitea --from-literal=token=' + gitea_token + ' --from-literal=webhook=""')

          # Optional: Save data to workspace
          settings_file = os.path.join(workspace_path, 'settings.xml')
          with open(settings_file, 'w') as file:
              file.write("Gitea configuration settings go here")
              print(f"Saved settings to {settings_file}")
